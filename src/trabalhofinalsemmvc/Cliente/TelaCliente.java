/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package trabalhofinalsemmvc.Cliente;

import br.com.caelum.stella.ValidationMessage;
import br.com.caelum.stella.validation.CPFValidator;
import java.text.ParseException;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author eduar
 */
public class TelaCliente extends javax.swing.JPanel {

    private ClienteTableModel clienteTableModel = new ClienteTableModel();
    private Cliente clienteSelecionadoParaAtualizacao;
    private ClienteMemoria clienteMemoria = new ClienteMemoria();
    private int linhaClicadaParaAtualizacao = -1;

    public TelaCliente() {
        initComponents();

        this.botaoCriar.addActionListener(e -> criarCliente());
        this.botaoAtualizar.addActionListener(e -> atualizarCliente());
        this.botaoExcluir.addActionListener(e -> excluirCliente());
        this.botaoListar.addActionListener(e -> listarCliente());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        erro = new java.awt.PopupMenu();
        jPanel1 = new javax.swing.JPanel();
        botaoCriar = new javax.swing.JButton();
        botaoAtualizar = new javax.swing.JButton();
        botaoExcluir = new javax.swing.JButton();
        botaoListar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaClientesFrame = new javax.swing.JTable();
        Nome = new javax.swing.JLabel();
        Sobrenome = new javax.swing.JLabel();
        RG = new javax.swing.JLabel();
        CPF = new javax.swing.JLabel();
        Endereco = new javax.swing.JLabel();
        campoNome = new javax.swing.JTextField();
        campoSobrenome = new javax.swing.JTextField();
        campoEndereco = new javax.swing.JTextField();
        MaskFormatter mascaraCpf = null;
        try {
            mascaraCpf = new MaskFormatter("###.###.###-##");
            mascaraCpf.setPlaceholder("   .   .   -  ");
        }
        catch (ParseException e) {
            System.out.println("Erro na conversao de mascara!! (CPF) ");
        }
        campoCPF = new javax.swing.JFormattedTextField(mascaraCpf);
        campoRG = new javax.swing.JFormattedTextField();

        erro.setLabel("popupMenu1");

        botaoCriar.setText("Criar");
        botaoCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCriarActionPerformed(evt);
            }
        });

        botaoAtualizar.setText("Atualizar");

        botaoExcluir.setText("Excluir");

        botaoListar.setText("Listar");

        tabelaClientesFrame.setModel(clienteTableModel);
        tabelaClientesFrame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaClientesFrameMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaClientesFrame);

        Nome.setText("Nome");

        Sobrenome.setText("Sobrenome");

        RG.setText("RG");

        CPF.setText("CPF");

        Endereco.setText("Endere√ßo");

        campoCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoCPFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Endereco)
                        .addGap(18, 18, 18)
                        .addComponent(campoEndereco))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Sobrenome)
                            .addComponent(RG)
                            .addComponent(CPF))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(campoCPF))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoSobrenome)
                                    .addComponent(campoNome)
                                    .addComponent(campoRG)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Nome)
                        .addGap(0, 400, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(botaoCriar)
                .addGap(18, 18, 18)
                .addComponent(botaoAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoListar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoCriar)
                    .addComponent(botaoAtualizar)
                    .addComponent(botaoExcluir)
                    .addComponent(botaoListar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Nome)
                    .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Sobrenome, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(campoSobrenome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RG)
                    .addComponent(campoRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CPF)
                    .addComponent(campoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Endereco))
                .addGap(39, 39, 39))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Endereco, campoNome});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaClientesFrameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaClientesFrameMouseClicked
        //Pega a linha clicada
        linhaClicadaParaAtualizacao = this.tabelaClientesFrame.rowAtPoint(evt.getPoint());
        //Pega o cliente da linha clicada
        Cliente cliente = clienteTableModel.getCliente(linhaClicadaParaAtualizacao);
        //Seta os dados no formul√°rio
        this.setCliente(cliente);
    }//GEN-LAST:event_tabelaClientesFrameMouseClicked

    private void botaoCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCriarActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_botaoCriarActionPerformed

    private void campoCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoCPFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoCPFActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CPF;
    private javax.swing.JLabel Endereco;
    private javax.swing.JLabel Nome;
    private javax.swing.JLabel RG;
    private javax.swing.JLabel Sobrenome;
    private javax.swing.JButton botaoAtualizar;
    private javax.swing.JButton botaoCriar;
    private javax.swing.JButton botaoExcluir;
    private javax.swing.JButton botaoListar;
    private javax.swing.JFormattedTextField campoCPF;
    private javax.swing.JTextField campoEndereco;
    private javax.swing.JTextField campoNome;
    private javax.swing.JFormattedTextField campoRG;
    private javax.swing.JTextField campoSobrenome;
    private java.awt.PopupMenu erro;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaClientesFrame;
    // End of variables declaration//GEN-END:variables

    //Comportamento dos botoes
    public void criarCliente() {
        try {
            String cpf = campoCPF.getText();
            CPFValidator cpfValidator = new CPFValidator();
            List<ValidationMessage> erros = cpfValidator.invalidMessagesFor(cpf);

            if (erros.size() > 0) {
                this.apresentaInfo("Digite seu CPF corretamente!");
            } 
            else {
                Cliente cliente = this.getClienteFormulario();
                clienteMemoria.inserir(cliente);
                clienteTableModel.adicionaCliente(cliente);
               
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            this.apresentaErro("Erro ao criar cliente.");
        }
    }

    public void atualizarCliente() {
        String cpf = campoCPF.getText();
        CPFValidator cpfValidator = new CPFValidator();
        List<ValidationMessage> erros = cpfValidator.invalidMessagesFor(cpf);
        try {
            Cliente cliente = this.getClienteParaAtualizar();
            if (cliente == null) {
                this.apresentaInfo("Selecione um cliente na tabela para atualizar.");
            }
            
        } catch (Exception ex) {
            this.apresentaErro("Erro ao atualizar cliente.");
        }
    }

    public void excluirCliente() {
        try {
            List<Cliente> listaParaExcluir = this.getClientesParaExcluirDaTabela();
            clienteMemoria.excluirLista(listaParaExcluir);
            this.excluirClientesDaTabela(listaParaExcluir);
        } catch (Exception ex) {
            this.apresentaErro("Erro ao excluir clientes.");
        }
    }

    public void listarCliente() {
        try {
            List<Cliente> lista = clienteMemoria.getLista();
            clienteTableModel.setListaClientes(lista);
        } catch (Exception ex) {
            this.apresentaErro("Erro ao listar clientes.");
        }
    }

    //M√©todos formul√°rio
    public void setCliente(Cliente cliente) {
        this.clienteSelecionadoParaAtualizacao = cliente;
        campoSobrenome.setText(cliente.getSobrenome());
        campoCPF.setText(cliente.getCpf());
        campoRG.setText(cliente.getRg());
        campoEndereco.setText(cliente.getEndereco());
        campoNome.setText(cliente.getNome());

    }

    public Cliente getClienteParaAtualizar() {
        if (clienteSelecionadoParaAtualizacao == null) {
            return null;
        }
        clienteSelecionadoParaAtualizacao.setNome(campoNome.getText());
        clienteSelecionadoParaAtualizacao.setSobrenome(campoSobrenome.getText());
        clienteSelecionadoParaAtualizacao.setCpf(campoCPF.getText());
        clienteSelecionadoParaAtualizacao.setRg(campoRG.getText());
        clienteSelecionadoParaAtualizacao.setEndereco(campoEndereco.getText());
        return clienteSelecionadoParaAtualizacao;
    }

    public Cliente getClienteFormulario() {

        String nome = campoNome.getText();
        String sobrenome = campoSobrenome.getText();
        String rg = campoRG.getText();
        String cpf = campoCPF.getText();
        String endereco = campoEndereco.getText();

        return new Cliente(nome, sobrenome, rg, cpf, endereco);
    }

    //M√©todos Tabela
    public void inserirClienteTabela(Cliente cliente) {
        clienteTableModel.adicionaCliente(cliente);
    }

    public void setListaClientesTabela(List<Cliente> lista) {
        clienteTableModel.setListaClientes(lista);
    }

    public List<Cliente> getClientesParaExcluirDaTabela() {
        int[] linhasSelecionadas = tabelaClientesFrame.getSelectedRows();
        List<Cliente> listaExcluir = new ArrayList();
        for (int i = 0; i < linhasSelecionadas.length; i++) {
            Cliente cliente = clienteTableModel.getCliente(linhasSelecionadas[i]);
            listaExcluir.add(cliente);
        }
        return listaExcluir;
    }

    public void excluirClientesDaTabela(List<Cliente> listaParaExcluir) {
        clienteTableModel.removeClientes(listaParaExcluir);
    }

    public void atualizarClienteNaTabela(Cliente cliente) {

        clienteTableModel.fireTableRowsUpdated(linhaClicadaParaAtualizacao, linhaClicadaParaAtualizacao);

    }

    //M√©todos de mensagem
    public void apresentaErro(String erro) {
        JOptionPane.showMessageDialog(null, erro + "\n", "Erro", JOptionPane.ERROR_MESSAGE);
    }

    public void apresentaInfo(String info) {
        JOptionPane.showMessageDialog(null, info + "\n", "Informa√ß√£o", JOptionPane.INFORMATION_MESSAGE);
    }
}
